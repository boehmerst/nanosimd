-- ********************************************
-- * SRAM FILE GENERATED BY HiCoVec ASSEMBLER *
-- *  do not make modifications here          *
-- ********************************************

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

--library std;
use std.textio.all;


entity sram is
  generic (
    file_name_g  : string   := "none";
    data_width_g : positive := 32;
    addr_width_g : positive := 16
  );
  port (
    clk_i  : in  std_ulogic;
    we_i   : in  std_ulogic;
    en_i   : in  std_ulogic;
    addr_i : in  std_ulogic_vector(addr_width_g-1 downto 0);
    di_i   : in  std_ulogic_vector(data_width_g-1 downto 0);
    do_o   : out std_ulogic_vector(data_width_g-1 downto 0)
   );
end sram;

architecture rtl of sram is
  constant entries : integer := (2**addr_width_g);

  type   ram_t is array(entries-1 downto 0) of std_ulogic_vector(data_width_g-1 downto 0);

  -------------------------------------------------------------------------------
  -- mem_init
  -- TODO: skip lines with leading //
  --       skip blank lines
  -------------------------------------------------------------------------------
  procedure mem_init(variable RAM : inout ram_t) is
    file     readfile       : text open read_mode is file_name_g;
    variable vecline        : line;

    variable add_ulv        : std_ulogic_vector(addr_width_g-1 downto 0);
    variable var_ulv        : std_ulogic_vector(data_width_g-1 downto 0);

    variable add_int        : natural   := 0;
    variable addr_indicator : character := ' ';
  begin
    readline(readfile, vecline);

    read(vecline, addr_indicator);
    assert addr_indicator = '@' report "Incorrect address indicator: expecting @address" severity failure;

    hread(vecline, add_ulv);
    add_int := to_integer(unsigned(add_ulv));
        	      
    while not endfile(readfile) loop
      ----------------------------------------------------------------------
      -- read data
      -----------------------------------------------------------------------
      readline(readfile, vecline);
      hread(vecline, var_ulv);

      if(add_int > entries-1) then
        assert false report "Address out of range while filling memory" severity failure;
      else
        ram(add_int) := var_ulv;
        add_int      := add_int + 1;
      end if;
    end loop;
    assert false report "Memory filling successfull" severity note;
  end procedure mem_init;

begin
  mem: process (clk_i)
    variable ram          : ram_t;
    variable readcontents : boolean := true;
  begin
    if(readcontents = true and file_name_g /= "none") then
      mem_init(ram);
      readcontents := false;
    end if;
	    
    if rising_edge(clk_i) then
      if en_i = '1' then
        if we_i = '1' then
          ram(to_integer(unsigned(addr_i))) := di_i;
          do_o <= di_i;
        else
          do_o <= ram(to_integer(unsigned(addr_i)));
        end if;
      end if;
    end if;
  end process mem;
end architecture rtl;
